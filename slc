#!/bin/bash
## uncomment set -x and set -e to debug
## set -x
## set -e

## import layers
source ./layers.slc

## do some check works
#################################################################
#################################################################
SLC_HOME=~/.slc


check_root_status() {
	if [[ `whoami` == "root" ]]; then
		echo "you are running in root mode, please rerun in non-root mode"
		exit 85
	fi
}
check_distro() {
	if [[ -f /etc/os-release ]]; then
		source /etc/os-release
		if [[ $ID == "debian" && $VERSION_ID == "8" ]]; then
			VERSION_CODENAME=jessie
		elif [[ $ID == "debian" && $VERSION_ID == "9" ]]; then
			VERSION_CODENAME=stretch
		fi
		export ID
		export VERSION_CODENAME
	elif type lsb_release >/dev/null 2>&1; then
		ID=`lsb_release -is`
		VERSION_CODENAME=`lsb_release -cs`
		export ID
		export VERSION_CODENAME
	fi
}
distrubuted_check() {
	for layer in $Layers; do
		echo "checking layer $layer"
		source ./layers/$layer/check.sh;
	done
}
#################################################################
checks() {
	check_root_status
	check_distro
	distrubuted_check
}
checks
#################################################################
#################################################################
#################################################################

## do some config works
#################################################################
#################################################################
gen_source() {
	case $ID in
		ubuntu | Ubuntu)
			if [[ -f ./sources/ubuntu/self/$VERSION_CODENAME ]]; then
				rm ./sources/ubuntu/self/$VERSION_CODENAME
			fi
			mkdir -p ./sources/ubuntu/self
			cp ./sources/template.ubuntu ./sources/ubuntu/self/$VERSION_CODENAME
			echo ===========================================================
			echo "enter the source mirror for generation"
			echo ===========================================================
			read source_mirror
			sed -i "s/your.mirror/$source_mirror/g" ./sources/ubuntu/self/$VERSION_CODENAME
			sed -i "s/codename/$VERSION_CODENAME/g" ./sources/ubuntu/self/$VERSION_CODENAME
			;;
	esac
}
source_config() {
	case $ID in
		ubuntu | Ubuntu)
			echo ===========================================================
			read -p "do you wanna generate a source file to use?  (y/N)  " gen_will
			echo ===========================================================
			if [[ $gen_will == 'y' || $gen_will == "Y" ]]; then
				gen_source
			fi
			echo "choose the suitable source"
			echo "0) self 1) azure 2) ustc"
			echo "default to no change"
			read SOURCE_NUMBER
			if [[ $SOURCE_NUMBER == 0 ]]; then
				if [[ -f ./sources/self/$VERSION_NAME ]]; then
					sudo cp ./sources/ubuntu/self/$VERSION_CODENAME /etc/apt/sources.list
				else
					echo "you didn't generate any source"
				fi
			elif [[ $SOURCE_NUMBER == 1 ]]; then
				sudo cp ./sources/ubuntu/azure/$VERSION_CODENAME /etc/apt/sources.list
			elif [[ $SOURCE_NUMBER == 2 ]]; then
				sudo cp ./sources/ubuntu/ustc/$VERSION_CODENAME /etc/apt/sources.list
			fi
			;;
	esac
}
distributed_config() {
	for layer in $Layers; do
		source ./layers/$layer/config.sh
	done
}

#################################################################
configs() {
	source_config
	echo ===================================================================
	echo the following layers:
	echo $Layers
	echo will be configured
	echo ===================================================================
	read -p "do you wanna continue? (y/N)  " YES_NO
	if [[ $YES_NO == 'y' || $YES_NO == 'Y' ]]; then
		distributed_config
	fi
}
configs
#################################################################
#################################################################
#################################################################

install() {
	if [[ $ID == 'ubuntu' || $ID == 'Ubuntu' ]]; then
		sudo apt-get -y update && sudo apt-get -y full-upgrade && sudo apt-get -y install vim-nox emacs-nox git curl wget axel aria2 python-all-dev python3-all-dev python-dev python3-dev python-pip python3-pip python-setuptools python3-setuptools libncurses5-dev libsqlite3-dev libbz2-dev libzip-dev libreadline-dev make build-essential libssl-dev zlib1g-dev llvm clang xz-utils tk-dev clang cmake cmake-curses-gui shadowsocks zsh tmux
	fi
	for layer in $Layers; do
		. ./layers/$layer/install.sh
	done
}
